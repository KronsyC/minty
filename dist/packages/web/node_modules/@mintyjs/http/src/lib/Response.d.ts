/// <reference types="node" />
import { Readable } from "stream";
import { BaseRequest, BaseResponse as BaseResponse, ResponseHeaders } from "../util/types";
declare type ResponseEvent = "close" | "drain" | "error" | "pipe" | "finish" | "unpipe";
export default class Response {
    rawResponse: BaseResponse;
    private sendResponse;
    constructor(res: BaseResponse);
    get writable(): boolean;
    uncork(): void;
    get statusMessage(): string;
    set statusMessage(status: string);
    get statusCode(): number;
    set statusCode(status: number);
    get sendDate(): boolean;
    pipe(destination: any, options?: {
        end?: boolean;
    }): any;
    get destroyed(): boolean;
    destroy(error?: Error): import("http").ServerResponse | import("http2").Http2ServerResponse;
    cork(): void;
    addTrailers(trailers: ResponseHeaders): void;
    get req(): BaseRequest;
    end(data: string | Uint8Array, cb?: () => void): void;
    addListener(event: "close", listener: () => void): BaseResponse;
    addListener(event: "drain", listener: () => void): BaseResponse;
    addListener(event: "error", listener: (err: Error) => void): BaseResponse;
    addListener(event: "finish", listener: () => void): BaseResponse;
    addListener(event: "pipe", listener: (src: Readable) => void): BaseResponse;
    addListener(event: "unpipe", listener: (src: Readable) => void): BaseResponse;
    listenerCount(event: ResponseEvent): number;
    listeners(event: ResponseEvent): Function[];
    rawListeners(event: ResponseEvent): Function[];
    getMaxListeners(): number;
    removeListener(event: ResponseEvent, listener: () => void): void;
    setMaxListeners(count: number): void;
    prependListener(event: ResponseEvent, listener: () => void): void;
    prependOnceListener(event: ResponseEvent, listener: () => void): void;
    removeAllListeners(event: ResponseEvent): void;
    off(event: ResponseEvent, listener: () => void): void;
    on(event: "close", listener: () => void): BaseResponse;
    on(event: "drain", listener: () => void): BaseResponse;
    on(event: "error", listener: (err: Error) => void): BaseResponse;
    on(event: "finish", listener: () => void): BaseResponse;
    on(event: "pipe", listener: (src: Readable) => void): BaseResponse;
    on(event: "unpipe", listener: (src: Readable) => void): BaseResponse;
    eventNames(): (string | symbol)[];
    emit(event: ResponseEvent): boolean;
    get headersSent(): boolean;
    getHeader(name: string): string | number | string[] | undefined;
    getHeaders(): import("http").OutgoingHttpHeaders;
    getHeaderNames(): string[];
    hasHeader(name: string): boolean;
    setHeader(name: string, value: string | number | string[]): void;
}
export {};
