/// <reference types="node" />
import { Socket } from 'net';
import { TLSSocket } from 'tls';
import { BaseRequest as BaseRequest, Method } from '../util/types';
declare type RequestEvent = 'aborted' | 'close' | 'data' | 'end' | 'error' | 'pause' | 'readable' | 'resume';
declare function GLFn(event: 'aborted', callback: (hadError: boolean, code: number) => void): void;
declare function GLFn(event: 'close', callback: () => void): void;
declare function GLFn(event: 'data', callback: (chunk: any) => void): void;
declare function GLFn(event: 'end', callback: () => void): void;
declare function GLFn(event: 'error', callback: (err: Error) => void): void;
declare function GLFn(event: 'pause', callback: () => void): void;
declare function GLFn(event: 'readable', callback: () => void): void;
declare function GLFn(event: 'resume', callback: () => void): void;
declare type GenericListenerFunction = typeof GLFn;
export default class Request {
    rawRequest: BaseRequest;
    constructor(req: BaseRequest);
    unshift(chunk: any, encoding?: BufferEncoding): void;
    unpipe(destination: NodeJS.WritableStream): BaseRequest;
    wrap(stream: NodeJS.ReadableStream): BaseRequest;
    setEncoding(encoding: BufferEncoding): BaseRequest;
    resume(): BaseRequest;
    pause(): BaseRequest;
    pipe(destination: NodeJS.WritableStream, options: {
        end?: boolean;
    }): NodeJS.WritableStream;
    push(chunk: any, encoding?: BufferEncoding): boolean;
    on: GenericListenerFunction;
    off: GenericListenerFunction;
    once: GenericListenerFunction;
    isPaused(): boolean;
    eventNames(): (string | symbol)[];
    emit(event: RequestEvent): void;
    destroy(err?: Error): BaseRequest;
    get rawTrailers(): string[];
    get trailers(): import("http2").IncomingHttpHeaders | NodeJS.Dict<string>;
    get socket(): Socket | TLSSocket;
    get rawHeaders(): string[];
    get method(): Method;
    get url(): string;
    get headers(): import("http2").IncomingHttpHeaders | import("http").IncomingHttpHeaders;
    get httpVersion(): string;
    get httpVersionMajor(): number;
    get httpVersionMinor(): number;
    get aborted(): boolean;
    get complete(): boolean;
    get destroyed(): boolean;
    read(size: number | undefined): any;
    addListener: GenericListenerFunction;
    rawListeners(event: RequestEvent): Function[];
    getMaxListeners(): number;
    removeListener: GenericListenerFunction;
    setMaxListeners(n: number): import("http").IncomingMessage | import("http2").Http2ServerRequest;
    prependListener: GenericListenerFunction;
    removeAllListeners(): import("http").IncomingMessage | import("http2").Http2ServerRequest;
    prependOnceListener: GenericListenerFunction;
    listeners(): (eventName: string | symbol) => Function[];
    listenersCount(): (eventName: string | symbol) => number;
    get readable(): boolean;
    get readableAborted(): boolean;
    get readableDidRead(): boolean;
    get readableEncoding(): BufferEncoding | null;
    get readableEnded(): boolean;
    get readableFlowing(): boolean | null;
    get readableHighWaterMark(): number;
    get readableLength(): number;
    get readableObjectMode(): boolean;
}
export {};
