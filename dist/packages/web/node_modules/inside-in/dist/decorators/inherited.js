"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Inherited = void 0;
const deepmerge_1 = __importDefault(require("deepmerge"));
function Inherited(overrideParentProperties = true, deepMerge = false) {
    return function (target, propertyKey) {
        const symbol = Symbol(`Inherited Property for ${String(propertyKey)}`);
        const getter = function () {
            const value = this[symbol];
            const parent = this["getParent"]();
            if (!parent) {
                return value;
            }
            else {
                const parentProp = parent[symbol];
                let toReturn = overrideParentProperties ? Object.assign(Object.assign({}, parentProp), value) : Object.assign(Object.assign({}, value), parentProp);
                if (deepMerge) {
                    toReturn = overrideParentProperties ? (0, deepmerge_1.default)(parentProp, value) : (0, deepmerge_1.default)(value, parentProp);
                }
                return toReturn;
            }
        };
        const setter = function (data) {
            if (typeof data !== "object") {
                throw new Error("@Inherited() Decorated Properties must be objects");
            }
            this[symbol] = data;
        };
        Object.defineProperty(target, propertyKey, {
            get: getter,
            set: setter
        });
    };
}
exports.Inherited = Inherited;
