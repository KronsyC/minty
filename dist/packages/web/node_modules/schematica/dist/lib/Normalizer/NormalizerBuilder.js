"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Schemas_1 = require("../../Schemas");
var getValidator_1 = __importDefault(require("../Validator/getValidator"));
var NormalizerBuilder = (function () {
    function NormalizerBuilder(validator) {
        this.validator = validator;
    }
    NormalizerBuilder.prototype.buildStringNormalizer = function (schema) {
        return "\n            const ".concat(schema.id, "_conv = String(").concat(schema.id, ")\n        ");
    };
    NormalizerBuilder.prototype.buildNumberNormalizer = function (schema) {
        return "\n        const ".concat(schema.id, "_conv = Number(").concat(schema.id, ")\n        ");
    };
    NormalizerBuilder.prototype.buildBooleanNormalizer = function (schema) {
        return "\n        const ".concat(schema.id, "_conv = Boolean(").concat(schema.id, ")\n        ");
    };
    NormalizerBuilder.prototype.buildAnyNormalizer = function (schema) {
        return "\n        const ".concat(schema.id, "_conv = ").concat(schema.id, "\n        ");
    };
    NormalizerBuilder.prototype.buildObjectNormalizer = function (schema) {
        var buildChildNormalizers = function () {
            var code = "";
            schema.properties.forEach(function (value, key) {
                code += "\n                if(".concat(schema.id, "[\"").concat(key, "\"]){\n                    ").concat(schema.id, "_conv[\"").concat(key, "\"] = normalize_").concat(value.id, "(").concat(schema.id, "[\"").concat(key, "\"])\n                }\n                ");
            });
            return code;
        };
        var constDeclaration = function () {
            var code = "const ".concat(schema.id, "_conv = ").concat(schema.structure);
            if (!schema.strict) {
                code = "\n                const ".concat(schema.id, "_conv = { ...").concat(schema.structure, ", ...").concat(schema.id, " }\n                ");
            }
            return code;
        };
        return "\n        ".concat(constDeclaration(), "\n        \n\n        if(Array.isArray(").concat(schema.id, ")){\n            throw new Error(\"Cannot use arrays with an object normalizer\")\n        }\n        ").concat(buildChildNormalizers(), "\n        ");
    };
    NormalizerBuilder.prototype.buildArrayNormalizer = function (schema) {
        if (schema.items.size !== 1) {
            throw new Error("The Array Normalizer can only be used with schemas of one item type");
        }
        var item_id = Array.from(schema.items.keys())[0].id;
        return "\n            const ".concat(schema.id, "_conv = []\n            if(!Array.isArray(").concat(schema.id, ")){\n                throw new Error(\"Data passed to an array normalizer must be an array\")\n            }\n            ").concat(schema.id, ".forEach(item => {\n                ").concat(schema.id, "_conv.push(normalize_").concat(item_id, "(item))\n            })\n        ");
    };
    NormalizerBuilder.prototype.build = function (schema, options) {
        var _a, _b;
        if (options === void 0) { options = {}; }
        var child = (_a = options.isChild) !== null && _a !== void 0 ? _a : false;
        var asFunction = (_b = options.asFunction) !== null && _b !== void 0 ? _b : true;
        var normalizer = "";
        switch (schema.type) {
            case "string":
                normalizer += this.buildStringNormalizer(schema);
                break;
            case "number":
                normalizer += this.buildNumberNormalizer(schema);
                break;
            case "boolean":
                normalizer += this.buildBooleanNormalizer(schema);
                break;
            case "any":
                normalizer += this.buildAnyNormalizer(schema);
                break;
            case "object":
                normalizer += this.buildObjectNormalizer(schema);
                break;
            case "array":
                normalizer += this.buildArrayNormalizer(schema);
                break;
            default:
                throw new Error("Cannot create normalizer for type ".concat(schema.type));
        }
        if (!child) {
            var validator = (0, getValidator_1.default)(schema, this.validator.builder);
            var dependencies = "\n            function validate_".concat(schema.id, "(").concat(schema.id, "){\n                ").concat(validator, "\n            }\n            if(!validate_").concat(schema.id, "(").concat(schema.id, "_conv)){\n                throw Object.defineProperty(new Error(\"Data does not match normalizer schema\"), \"error\", {value: validate_").concat(schema.id, ".error})\n            }\n            ");
            if (schema instanceof Schemas_1.ObjectSchema || schema instanceof Schemas_1.ArraySchema) {
                var children = schema.allChildren;
                for (var path in children) {
                    var child_1 = children[path];
                    var normalizer_1 = this.build(child_1, { asFunction: false, isChild: true });
                    dependencies += "\n                    function normalize_".concat(child_1.id, "(").concat(child_1.id, "){\n                        ").concat(normalizer_1, "\n                    }\n                    ");
                }
            }
            normalizer += dependencies;
        }
        normalizer += "\n        return ".concat(schema.id, "_conv\n        ");
        if (asFunction) {
            return new Function(schema.id, normalizer);
        }
        else {
            return normalizer;
        }
    };
    return NormalizerBuilder;
}());
exports.default = NormalizerBuilder;
