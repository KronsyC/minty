"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var Schemas_1 = require("./lib/Schemas");
var Validator_1 = __importDefault(require("./lib/utilities/Validator/Validator"));
var ERR_UNKNOWN_REF_1 = __importDefault(require("./errors/Schematica/ERR_UNKNOWN_REF"));
var Encoder_1 = __importDefault(require("./lib/utilities/Encoder/Encoder"));
var _1 = require(".");
var Schemas_2 = __importDefault(require("./lib/Schemas"));
var kValidator = Symbol("Validator");
var kParser = Symbol("Parser");
var kEncoder = Symbol("Encoder");
var kSchemaRefStore = Symbol("Schema Store");
var Schematica = (function () {
    function Schematica() {
        this[_a] = new Map();
        this[kValidator] = new Validator_1.default();
        this[kEncoder] = new Encoder_1.default({ validator: this[kValidator] });
        this[kParser] = new _1.Parser({ validator: this[kValidator] });
    }
    Schematica.prototype.getSchema = function (ref) {
        var schema = this[kSchemaRefStore].get(ref);
        if (schema) {
            return schema;
        }
        else {
            throw new ERR_UNKNOWN_REF_1.default();
        }
    };
    Schematica.prototype.buildValidator = function (arg, options) {
        if (typeof arg === "string") {
            return this.buildValidator(this.getSchema(arg), options);
        }
        else if (arg instanceof Schemas_1.BaseSchema) {
            return this[kValidator].build(arg, options);
        }
        else {
            throw (new Error("The Argument passed to buildValidator was not a string or Schema").name = "ERR_INVALID_ARGS");
        }
    };
    Schematica.prototype.buildSerializer = function (schema) {
        return this[kEncoder].build(schema);
    };
    Schematica.prototype.createSchema = function (schema) {
        var sch = (0, Schemas_2.default)(schema, this[kSchemaRefStore]);
        if (sch.name) {
            this[kSchemaRefStore].set(sch.name, sch);
        }
        return sch;
    };
    Schematica.prototype.buildParser = function (schema) {
        return this[kParser].build(schema);
    };
    return Schematica;
}());
exports.default = Schematica;
_a = kSchemaRefStore;
