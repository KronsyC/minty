import { AnySchema, AnySchemaTemplate, ArraySchema, ArraySchemaTemplate, BooleanSchema, BooleanSchemaTemplate, NumberSchema, NumberSchemaTemplate, ObjectSchema, ObjectSchemaTemplate, StringSchema, StringSchemaTemplate } from "./lib/Schemas";
import Validator, { ValidatorOptions } from "./lib/utilities/Validator/Validator";
import Encoder from "./lib/utilities/Encoder/Encoder";
import { GenericSchema as Schema, GenericSchemaTemplate as SchemaTemplate, Parser } from ".";
declare const kValidator: unique symbol;
declare const kParser: unique symbol;
declare const kEncoder: unique symbol;
declare const kSchemaRefStore: unique symbol;
export default class Schematica {
    [kSchemaRefStore]: Map<string, Schema>;
    [kValidator]: Validator;
    [kEncoder]: Encoder;
    [kParser]: Parser;
    constructor();
    getSchema(ref: string): Schema;
    buildValidator(schema: Schema, options?: ValidatorOptions): (data: unknown) => boolean;
    buildValidator(ref: string, options?: ValidatorOptions): (data: unknown) => boolean;
    buildSerializer(schema: AnySchema): (data: any) => string;
    buildSerializer(schema: BooleanSchema): (data: boolean) => string;
    buildSerializer(schema: NumberSchema): (data: number) => string;
    buildSerializer(schema: ObjectSchema): (data: object) => string;
    buildSerializer(schema: StringSchema): (data: string) => string;
    buildSerializer(schema: ArraySchema): (data: any[]) => string;
    buildSerializer(schema: Schema): (data: unknown) => string;
    createSchema(schema: AnySchemaTemplate): AnySchema;
    createSchema(schema: BooleanSchemaTemplate): BooleanSchema;
    createSchema(schema: ObjectSchemaTemplate): ObjectSchema;
    createSchema(schema: NumberSchemaTemplate): NumberSchema;
    createSchema(schema: StringSchemaTemplate): StringSchema;
    createSchema(schema: ArraySchemaTemplate): ArraySchema;
    createSchema(schema: SchemaTemplate): Schema;
    buildParser(schema: Schema): any;
}
export {};
