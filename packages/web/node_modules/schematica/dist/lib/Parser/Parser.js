"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ERR_INVALID_DATA_1 = require("./errors/ERR_INVALID_DATA");
var Validator_1 = __importDefault(require("../Validator/Validator"));
var ERR_BAD_JSON_1 = require("./errors/ERR_BAD_JSON");
var getValidator_1 = __importDefault(require("../Validator/getValidator"));
var protoPollutionRegex = /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/;
var constructorPolutionRegex = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var Parser = (function () {
    function Parser(params) {
        this.validator = params.validator || Validator_1.default.default;
    }
    Parser.prototype.scrub = function (data) {
        var next = [data];
        while (next.length > 0) {
            var nodes = next;
            next = [];
            nodes.forEach(function (node) {
                var e_1, _a;
                if (Object.hasOwnProperty.call(node, "__proto__")) {
                    delete node.__proto__;
                }
                if (Object.hasOwnProperty.call(node, "constructor") &&
                    Object.hasOwnProperty.call(node.constructor, "prototype")) {
                    delete node.constructor;
                }
                if (node && typeof node === "object") {
                    try {
                        for (var _b = (e_1 = void 0, __values(Object.entries(node))), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var _d = __read(_c.value, 2), _ = _d[0], value = _d[1];
                            if (value && typeof value === "object") {
                                next.push(value);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            });
        }
    };
    Parser.prototype.build = function (schema) {
        var _this = this;
        var parser = (function (data, reviver) {
            try {
                var parsed = JSON.parse(data);
                if (validator(parsed)) {
                    if (parsed === null || typeof parsed !== "object") {
                        return parsed;
                    }
                    else {
                        _this.scrub(parsed);
                        if (protoPollutionRegex.test(data) || constructorPolutionRegex.test(data)) {
                            _this.scrub(parsed);
                        }
                        return parsed;
                    }
                }
                else {
                    throw new ERR_INVALID_DATA_1.ERR_INVALID_DATA("Data does not match parser schema", validator.error);
                }
            }
            catch (err) {
                if (err instanceof SyntaxError) {
                    throw new ERR_BAD_JSON_1.ERR_BAD_JSON(err.message);
                }
                else {
                    throw err;
                }
            }
        });
        var validator = new Function("return function validate_".concat(schema.id, "(").concat(schema.id, "){\n            ").concat((0, getValidator_1.default)(schema, this.validator.builder), "\n        } "))();
        return parser;
    };
    return Parser;
}());
exports.default = Parser;
