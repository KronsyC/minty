"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArraySchema = void 0;
var __BaseSchema_1 = require("./__BaseSchema");
var _1 = __importStar(require("."));
var ERR_UNKNOWN_REF_1 = __importDefault(require("../../errors/Schematica/ERR_UNKNOWN_REF"));
var ERR_INVALID_RANGE_1 = __importDefault(require("./errors/ERR_INVALID_RANGE"));
var ArraySchema = (function (_super) {
    __extends(ArraySchema, _super);
    function ArraySchema(template, schemaRefStore) {
        var _this = _super.call(this, template) || this;
        _this.items = new Set();
        _this.typecheck = "(typeof ".concat(_this.id, " === \"object\" &&Array.isArray(").concat(_this.id, "))");
        _this.strict = template.strict || true;
        _this.minSize = template.minSize || 0;
        _this.maxSize = template.maxSize || Number.MAX_SAFE_INTEGER;
        if (template.items) {
            template.items.forEach(function (value) {
                if (typeof value === "string" && value.startsWith("$")) {
                    var schema = schemaRefStore.get(value.slice(1));
                    if (schema) {
                        _this.items.add(schema);
                    }
                    else {
                        throw new ERR_UNKNOWN_REF_1.default("Could not find the ref ".concat(value));
                    }
                }
                else if (typeof value === "string") {
                    _this.items.add((0, _1.getPresetByName)(value));
                }
                else {
                    _this.items.add((0, _1.default)(value, schemaRefStore));
                }
            });
        }
        _this.validateSchema();
        return _this;
    }
    ArraySchema.prototype.validateSchema = function () {
        if (this.maxSize - this.minSize < 0) {
            throw new ERR_INVALID_RANGE_1.default("minSize cannot be greater than maxSize");
        }
        else if (this.minSize < 0) {
            throw new ERR_INVALID_RANGE_1.default("minSize must be greater or equal to 0");
        }
        else if (this.maxSize < 0) {
            throw new ERR_INVALID_RANGE_1.default("maxSize must be greater or equal to 0");
        }
        if (this.items.size === 0) {
            throw new Error("You must define at least one key type in an array schema");
        }
    };
    return ArraySchema;
}(__BaseSchema_1.BaseSchema));
exports.ArraySchema = ArraySchema;
