"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var extractSourceFromFn_1 = __importDefault(require("../helpers/extractSourceFromFn"));
var getValidator_1 = __importDefault(require("../helpers/getValidator"));
var ValidatorBuilder = (function () {
    function ValidatorBuilder() {
    }
    ValidatorBuilder.prototype.buildStringValidator = function (schema, varname) {
        var fnSrc = "\n        if(!".concat(schema.typecheck, "){\n            throw new Error(`Data must be of type \"string\", but was found to be of type ${typeof ").concat(varname, "}`);\n        }\n        ").concat(schema.maxLength < Number.MAX_SAFE_INTEGER ? "if(".concat(varname, ".length > ").concat(schema.maxLength, "){\n            throw new Error(`Data may not contain over ").concat(schema.maxLength, " character(s), but was found to have ${").concat(varname, ".length}`);\n\n        }") : "", "\n        ").concat(schema.minLength > 0 ? "if(".concat(varname, ".length < ").concat(schema.minLength, "){\n            throw new Error(`Data must contain at least ").concat(schema.minLength, " character(s), but was found to have ${").concat(varname, ".length}`);\n        }") : "", "\n        //#return\n        return true;\n    ");
        var fn = new Function(varname, fnSrc);
        return fn;
    };
    ValidatorBuilder.prototype.buildNumberValidator = function (schema, _varname) {
        var varname = _varname;
        var fn = new Function(varname, "\n        if(!".concat(schema.typecheck, "){\n            throw new Error(`Data must be of type \"number\", but was found to be of type ${typeof ").concat(varname, "}`);\n        }\n        ").concat(schema.max < Number.MAX_SAFE_INTEGER ? "if(".concat(varname, ">").concat(schema.max, "){\n            throw new Error(`Data may be a max of ").concat(schema.max, ", but was found to be ${").concat(varname, "}`);\n        }") : "", "\n        ").concat(schema.min > Number.MIN_SAFE_INTEGER ? "if(".concat(varname, "<").concat(schema.min, "){\n            throw new Error(`Data may be a minimum of ").concat(schema.min, ", but was found to be ${").concat(varname, "}`);\n        }") : "", "\n        //#return\n        return true\n        "));
        return fn;
    };
    ValidatorBuilder.prototype.buildBooleanValidator = function (schema) {
        var fn = new Function(schema.id, "\n        if(!".concat(schema.typecheck, "){\n            throw new Error(`Data must be of type \"boolean\", but was found to be of type ${typeof ").concat(schema.id, "}`);\n        }\n        //#return\n        return true\n        "));
        return fn;
    };
    ValidatorBuilder.prototype.buildAnyValidator = function (schema) {
        var fn = new Function(schema.id, "\n        if(!".concat(schema.typecheck, "){\n            throw new Error(`Data must be present, but a falsy value was provided`);\n        }\n        //#return\n        return true\n        "));
        return fn;
    };
    ValidatorBuilder.prototype.buildObjectValidator = function (schema) {
        var _this = this;
        var buildChildValidators = function () {
            var code = "";
            schema.properties.forEach(function (value, key) {
                var name = value.id;
                var childValidator = (0, getValidator_1.default)(value, _this);
                var sourceCode = (0, extractSourceFromFn_1.default)(childValidator);
                sourceCode = sourceCode.slice(0, sourceCode.indexOf("//#return"))
                    .replaceAll("Data", key);
                code += "\nconst ".concat(name, " = ").concat(schema.id, "[\"").concat(key, "\"];");
                if (schema.required.includes(key)) {
                    code += sourceCode;
                }
                else {
                    code += "\n                    if(".concat(name, "){\n                        ").concat(sourceCode, "\n                    }\n                    ");
                }
            });
            return code;
        };
        var genKeyCheck = function (name) {
            var e_1, _a;
            var code = "";
            try {
                for (var _b = __values(schema.properties), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                    code += "".concat(name, " === \"").concat(key, "\"||");
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            code = code.slice(0, -2);
            return code;
        };
        var strictCheck = function () {
            var code = "";
            if (schema.strict) {
                code += "\n                for(let key in ".concat(schema.id, "){\n                    if(!(").concat(genKeyCheck("key"), ")){\n                        throw new Error(`Key ${key} is not allowed`);\n                    }\n                }\n                ");
            }
            else {
            }
            return code;
        };
        var fnSource = "\n        if(!".concat(schema.typecheck, "){\n            throw new Error(`Data must be of type \"object\", but was found to be of type ${typeof ").concat(schema.id, "}`);\n        }\n        ").concat(strictCheck(), "\n        ").concat(buildChildValidators(), "\n        //#return\n        return true\n\n        ");
        var fn = new Function(schema.id, fnSource);
        return fn;
    };
    ValidatorBuilder.prototype.buildArrayValidator = function (schema) {
        var _this = this;
        var childValidatorDeclarations = function () {
            var e_2, _a;
            var code = "";
            try {
                for (var _b = __values(schema.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var sch = _c.value;
                    var validator = _this.build(sch);
                    var source_1 = (0, extractSourceFromFn_1.default)(validator).replaceAll("throw", "return false;throw").replaceAll("//#return", "");
                    code += "\n                function ".concat(sch.id, "_validator(").concat(sch.id, "){\n                    ").concat(source_1, "\n                }\n                ");
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return code;
        };
        var childValidators = function () {
            var e_3, _a;
            var code = "";
            try {
                for (var _b = __values(schema.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var sch = _c.value;
                    code += "\n                if(".concat(sch.id, "_validator(").concat(schema.id, "[index])){\n                    continue;\n                }\n                ");
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return code;
        };
        var source = "\n            ".concat(childValidatorDeclarations(), "\n\n            if(!(").concat(schema.typecheck, ")){\n                throw new Error(`Data must be of type \"array\", but was found to be of type ${typeof ").concat(schema.id, "}`);\n            }\n            ").concat(schema.maxSize < Number.MAX_SAFE_INTEGER ? "if(".concat(schema.id, ".length > ").concat(schema.maxSize, "){\n                throw new Error(`Data may not contain over ").concat(schema.maxSize, " item(s), but was found to have ${").concat(schema.id, ".length}`);\n    \n            }") : "", "\n            ").concat(schema.minSize > 0 ? "if(".concat(schema.id, ".length < ").concat(schema.minSize, "){\n                throw new Error(`Data must contain at least ").concat(schema.minSize, " item(s), but was found to have ${").concat(schema.id, ".length}`);\n            }") : "", "\n            for(let index = 0;index<").concat(schema.id, ".length;index++){\n                ").concat(childValidators(), "\n                throw new Error(`Data does not match schema at index ${index}`)\n            }\n            //#return\n            return true\n\n\n        ");
        return new Function(schema.id, source);
    };
    ValidatorBuilder.prototype.build = function (schema, varname) {
        if (varname === void 0) { varname = schema.id; }
        var validator;
        switch (schema.type) {
            case "string":
                validator = this.buildStringValidator(schema, varname);
                break;
            case "number":
                validator = this.buildNumberValidator(schema, varname);
                break;
            case "boolean":
                validator = this.buildBooleanValidator(schema);
                break;
            case "any":
                validator = this.buildAnyValidator(schema);
                break;
            case "object":
                validator = this.buildObjectValidator(schema);
                break;
            case "array":
                validator = this.buildArrayValidator(schema);
                break;
            default:
                throw new Error("Cannot build validator for type ".concat(schema.type));
        }
        Object.defineProperty(validator, "name", { value: "validator" });
        validator.schema = schema;
        schema.cache.set("validator", validator);
        return validator;
    };
    return ValidatorBuilder;
}());
exports.default = ValidatorBuilder;
