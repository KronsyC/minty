import { BooleanSchema } from './../../Schemas/_BooleanSchema';
import { GenericSchema } from './../../Schemas/Schema';
import { AnySchema, ArraySchema, NumberSchema, ObjectSchema, StringSchema, Validator } from "../../..";
export declare const codeGenDeps = "\nfunction $escaped(char){\n    switch(char){\n        case '\"':\n            return '\\\"'\n        case \"\\b\":\n            return \"\\b\"\n        case \"\\\\\":\n            return \"\\\\\\\\\"\n        case \"\\f\":\n            return \"\\\\f\"\n        case \"\\n\":\n            return \"\\\\n\"\n        case \"\\r\":\n            return \"\\\\r\"\n        default:\n            throw new Error(`Could not find escaped version for character ${char}`)\n    }\n}\nfunction $encodeStr(_data){\n    try{\n        let data = _data\n        let i=data.length-1;\n        while(i>-1){\n            const char = data[i]   \n            if(char==='\"'|| char===\"\\b\" || char===\"\\\\\" || char===\"\\f\" || char===\"\\n\" || char===\"\\r\" ){                        \n                data = data.slice(0, i) + $escaped(char) + data.slice(i+1)\n                i--   \n            }\n            i--\n        }\n        return '\"' + data + '\"'\n    }\n    catch(err){\n        throw err\n    }\n}\n";
export default class EncoderBuilder {
    private validator;
    constructor(validator: Validator);
    buildStringEncoder(schema: StringSchema, isChild?: boolean): (data: string) => string;
    buildNumberEncoder(schema: NumberSchema, isChild?: boolean): (data: number) => string;
    buildBooleanEncoder(schema: BooleanSchema, isChild?: boolean): (data: boolean) => string;
    buildObjectEncoder(schema: ObjectSchema, isChild?: boolean): (data: object) => string;
    buildArrayEncoder(schema: ArraySchema, isChild?: boolean): (data: any[]) => string;
    buildAnyEnocder(schema: AnySchema, isChild?: boolean): (data: any) => string;
    buildEncoder(schema: GenericSchema, isChild?: boolean): ((data: string) => string) | ((data: number) => string) | ((data: boolean) => string) | ((data: any[]) => string);
}
