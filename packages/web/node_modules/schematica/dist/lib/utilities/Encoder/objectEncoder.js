"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var extractSourceFromFn_1 = __importDefault(require("../helpers/extractSourceFromFn"));
var getValidator_1 = __importDefault(require("../helpers/getValidator"));
var EncoderBuilder_1 = require("./EncoderBuilder");
function objectEncoder(schema, validatorBuilder, encoderBuilder, isChild) {
    if (isChild === void 0) { isChild = false; }
    function propertyEncoders() {
        var e_1, _a;
        var code = "";
        var first = true;
        try {
            for (var _b = __values(schema.properties), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), name = _d[0], sch = _d[1];
                var encoder = encoderBuilder.buildEncoder(sch, true);
                code += "\n            function ".concat(sch.id, "_encoder(").concat(sch.id, "){\n                ").concat((0, extractSourceFromFn_1.default)(encoder), "\n            }");
                if (schema.required.includes(name)) {
                    code += "\n                encoded+=`".concat(!first ? "," : "", "\"").concat(name, "\":${").concat(sch.id, "_encoder(").concat(schema.id, "[\"").concat(name, "\"])}`;");
                }
                else {
                    code += "\n                if(".concat(schema.id, "[\"").concat(name, "\"]){\n                    encoded+=`").concat(!first ? "," : "", "\"").concat(name, "\":${").concat(sch.id, "_encoder(").concat(schema.id, "[\"").concat(name, "\"])}`;\n                }\n                ");
                }
                first = false;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return code;
    }
    function isProperty(v) {
        var e_2, _a;
        var code = "";
        var first = true;
        try {
            for (var _b = __values(schema.properties), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], _ = _d[1];
                if (!first) {
                    code += "||";
                }
                code += " ".concat(v, "===\"").concat(key, "\"");
                first = false;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return code;
    }
    function unknownPropertyEncoders() {
        var code = "\n        Object.keys(".concat(schema.id, ").forEach(key=> {\n            if(!(").concat(isProperty("key"), ")){\n                if(encoded.endsWith(\",\")){\n                    encoded+=JSON.stringify(").concat(schema.id, "[key])\n                }\n                else{\n                    encoded+=\",\"+'\"'+key+'\"'+\":\"+JSON.stringify(").concat(schema.id, "[key])\n                }\n            }\n        })\n        ");
        return code;
    }
    var validator = (0, getValidator_1.default)(schema, validatorBuilder);
    var validatorSrc = (0, extractSourceFromFn_1.default)(validator);
    var fn = new Function(schema.id, "\n        ".concat(!isChild ? EncoderBuilder_1.codeGenDeps : "", "\n        ").concat(!isChild ? validatorSrc.slice(0, validatorSrc.indexOf("//#return") || -1) : "", "\n        let encoded=\"{\";\n        ").concat(propertyEncoders(), "\n        ").concat(!schema.strict ? unknownPropertyEncoders() : "", "\n        encoded+=\"}\";\n        return encoded;\n    "));
    return fn;
}
exports.default = objectEncoder;
