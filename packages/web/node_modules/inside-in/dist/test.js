"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Nestable_1 = __importDefault(require("./Nestable"));
const decorators_1 = require("./decorators");
class Testing extends Nestable_1.default {
    constructor(initialState) {
        super();
        this.state = initialState;
    }
}
__decorate([
    (0, decorators_1.FromRoot)(),
    __metadata("design:type", Object)
], Testing.prototype, "state", void 0);
const t1 = new Testing({
    hello: "world"
});
const t2 = new Testing({
    hello: "No"
});
t1.addChild(t2);
console.log(t1.state);
console.log(t2.state);
while (1) { }
